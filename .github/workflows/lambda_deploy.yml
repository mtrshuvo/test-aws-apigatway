name: Lambda Folder Change Deployment

on:
  push:
    branches:
      - main
      - 'staging*'

jobs:
  deploy-lambdas:
    runs-on: ubuntu-latest

    # Select environment for GitHub environment secrets (optional)
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}

    # General environment variables (common for both prod & staging)
    env:
      REGION: ap-southeast-1
      REST_API_ID: 1u8zyys7vb
      ALLOWED_ORIGINS: ${{ vars.ALLOWED_ORIGINS }}
      COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}
      COGNITO_DOMAIN: ${{ vars.COGNITO_DOMAIN }}
      COGNITO_REDIRECT_URI: ${{ vars.COGNITO_REDIRECT_URI }}
      BOOK_KEY: ${{ vars.BOOK_KEY }}
      EBOOK_BUCKET: ${{ vars.EBOOK_BUCKET }}
      ORIGIN: ${{ vars.ORIGIN }}
      USER_POOL_ID: ${{ vars.USER_POOL_ID }}
      OPTIONS_CORS_DOMAIN: ${{ vars.OPTIONS_CORS_DOMAIN }}

    steps:
      # Full checkout (needed for git diff)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set environment variable based on branch
      - name: Determine environment
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
          else
            echo "ENV=staging" >> $GITHUB_ENV
          fi
          echo "Selected environment: $ENV"

      # Configure AWS credentials (same secrets for both environments)
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.REGION }}

      # Detect changed Lambda folders
      - name: Detect changed Lambda folders
        id: changed
        run: |
          echo "Detecting changed Lambda folders..."
          
          # Get the previous commit SHA
          if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]] || [[ -z "${{ github.event.before }}" ]]; then
            # First commit on branch or force push - compare with HEAD~1
            if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
              BEFORE_SHA="HEAD~1"
            else
              # Very first commit in repo - deploy all lambda folders
              echo "First commit in repository, finding all lambda folders..."
              CHANGED_FOLDERS=$(find . -maxdepth 1 -mindepth 1 -type d \
                -not -name ".git" \
                -not -name ".github" \
                -not -name "node_modules" \
                -not -name ".vscode" \
                -not -name "dist" \
                -not -name "build" \
                | sed 's|^\./||' | tr '\n' ' ')
              echo "All lambda folders: $CHANGED_FOLDERS"
              echo "CHANGED_LAMBDAS=$CHANGED_FOLDERS" >> $GITHUB_ENV
              exit 0
            fi
          else
            BEFORE_SHA="${{ github.event.before }}"
          fi
          
          echo "Comparing $BEFORE_SHA with ${{ github.sha }}"
          
          # Get changed files and extract top-level folders
          CHANGED_FILES=$(git diff --name-only "$BEFORE_SHA" "${{ github.sha }}" || true)
          
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No files changed."
            echo "CHANGED_LAMBDAS=" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Extract unique top-level folders from changed files
          CHANGED_FOLDERS=$(echo "$CHANGED_FILES" | \
            grep -E '^[^/]+/' | \
            cut -d'/' -f1 | \
            sort -u | \
            tr '\n' ' ')
          
          # Filter out non-lambda folders (common non-lambda directories)
          FILTERED_FOLDERS=""
          for folder in $CHANGED_FOLDERS; do
            if [[ "$folder" != ".github" ]] && \
               [[ "$folder" != ".git" ]] && \
               [[ "$folder" != "docs" ]] && \
               [[ "$folder" != "scripts" ]] && \
               [[ "$folder" != "node_modules" ]] && \
               [[ "$folder" != ".vscode" ]] && \
               [[ "$folder" != "dist" ]] && \
               [[ "$folder" != "build" ]] && \
               [[ -d "$folder" ]]; then
              FILTERED_FOLDERS="$FILTERED_FOLDERS $folder"
            fi
          done
          
          # Trim whitespace
          FILTERED_FOLDERS=$(echo $FILTERED_FOLDERS | xargs)
          
          if [[ -z "$FILTERED_FOLDERS" ]]; then
            echo "No Lambda folder changes detected."
            echo "CHANGED_LAMBDAS=" >> $GITHUB_ENV
          else
            echo "Changed Lambda folders: $FILTERED_FOLDERS"
            echo "CHANGED_LAMBDAS=$FILTERED_FOLDERS" >> $GITHUB_ENV
          fi

      # Deploy changed Lambdas
      - name: Deploy changed Lambdas
        if: env.CHANGED_LAMBDAS != ''
        run: |
          echo "Deploying changed lambdas: $CHANGED_LAMBDAS"
          
          # Convert space-separated string to array
          IFS=' ' read -ra LAMBDAS <<< "$CHANGED_LAMBDAS"
          
          # Deploy each changed lambda
          for lambda in "${LAMBDAS[@]}"; do
            if [[ -n "$lambda" ]]; then
              echo "Deploying lambda: $lambda"
              
              # Check if the lambda folder exists and has necessary files
              if [[ -d "$lambda" ]]; then
                echo "Found lambda folder: $lambda"
                
                # You can add additional checks here like:
                # - Check for package.json, requirements.txt, or other lambda files
                # - Validate lambda structure before deployment
                
                # Call your deployment script
                if [[ -f ".github/scripts/deploy_lambdas.sh" ]]; then
                  bash .github/scripts/deploy_lambdas.sh select "$lambda"
                else
                  echo "Warning: Deployment script not found at .github/scripts/deploy_lambdas.sh"
                fi
              else
                echo "Warning: Lambda folder '$lambda' not found, skipping..."
              fi
            fi
          done

      # No changes detected
      - name: No changes
        if: env.CHANGED_LAMBDAS == ''
        run: |
          echo "No Lambda folder changes detected, skipping deployment."
          echo "This could mean:"
          echo "- Only non-lambda files were changed (docs, .github, etc.)"
          echo "- No files were changed in this push"
          echo "- Changed files are in non-existent directories"