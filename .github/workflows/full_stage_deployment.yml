name: Full Stage Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target stage to deploy"
        required: true
        type: choice
        options:
          - staging
          - prod

jobs:
  deploy-stage:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-southeast-1

      - name: Set environment
        id: env
        run: |
          echo "ENV=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT       

      - name: Deploy Lambdas if changed / new
        env:
          ALLOWED_ORIGINS: ${{ vars.ALLOWED_ORIGINS }}
          COGNITO_CLIENT_ID: ${{ vars.COGNITO_CLIENT_ID }}
          COGNITO_DOMAIN: ${{ vars.COGNITO_DOMAIN }}
          COGNITO_REDIRECT_URI: ${{ vars.COGNITO_REDIRECT_URI }}
          BOOK_KEY: ${{ vars.BOOK_KEY }}
          EBOOK_BUCKET: ${{ vars.EBOOK_BUCKET }}
          ORIGIN: ${{ vars.ORIGIN }}
          USER_POOL_ID: ${{ vars.USER_POOL_ID }}
        run: |
          #!/usr/bin/env bash
          set -euo pipefail
          ENV=${{ steps.env.outputs.ENV }}
          LAMBDAS=("get_google_sign_in_url" "get_ebook_metadata")   # Add Lambda names as needed

          declare -A LAMBDA_RUNTIME # Define runtimes for each Lambda
          LAMBDA_RUNTIME["get_google_sign_in_url"]="3.13"
          LAMBDA_RUNTIME["get_ebook_metadata"]="3.13"

          declare -A LAMBDA_ENV
          LAMBDA_ENV["get_google_sign_in_url"]=$(jq -n \
            --arg allowed "$ALLOWED_ORIGINS" \
            --arg client "$COGNITO_CLIENT_ID" \
            --arg domain "$COGNITO_DOMAIN" \
            --arg redirect "$COGNITO_REDIRECT_URI" \
            --arg origins "$ORIGIN" \
            '{Variables: {ALLOWED_ORIGINS: $allowed, COGNITO_CLIENT_ID: $client, COGNITO_DOMAIN: $domain, COGNITO_REDIRECT_URI: $redirect, ORIGINS: $origins}}')

          LAMBDA_ENV["get_ebook_metadata"]=$(jq -n \
            --arg book "$BOOK_KEY" \
            --arg bucket "$EBOOK_BUCKET" \
            --arg origin "$ORIGIN" \
            --arg userpool "$USER_POOL_ID" \
            '{Variables: {BOOK_KEY: $book, EBOOK_BUCKET: $bucket, ORIGIN: $origin, USER_POOL_ID: $userpool}}')


          for lambda in "${LAMBDAS[@]}"; do
            HASH_FILE=".github/.${lambda}.hash"
            echo "Processing $HASH_FILE ..."
            if [ ! -d "$lambda" ]; then
              echo "Directory for $lambda not found, skipping"
              continue
            fi

            NEW_HASH=$(shasum -a 256 $lambda/* 2>/dev/null | shasum -a 256 | awk '{print $1}')
            OLD_HASH=$(cat $HASH_FILE 2>/dev/null || echo "")

            if [ "$NEW_HASH" != "$OLD_HASH" ]; then
              echo "Updating $lambda..."

              PYTHON_VERSION=${LAMBDA_RUNTIME[$lambda]}
              echo "Packaging $lambda with Python $PYTHON_VERSION"

              TMP_DIR=$(mktemp -d)
              cp -r $lambda/* $TMP_DIR/

              if [ -f "$TMP_DIR/requirements.txt" ]; then
                echo "Installing dependencies for $lambda using Docker"
                docker run --rm -v $PWD:/app -w /app python:$PYTHON_VERSION bash -c "
                  pip install -r $TMP_DIR/requirements.txt -t $TMP_DIR"
              fi

              cd $TMP_DIR && zip -r $GITHUB_WORKSPACE/$lambda.zip . && cd -
              rm -rf $TMP_DIR

              echo "Updating environment variables for $lambda"
              echo "${LAMBDA_ENV[$lambda]}" > env.json
              aws lambda update-function-configuration \
                --function-name $lambda \
                --environment file://env.json
              rm env.json

               # Wait for configuration update to complete
              echo "Waiting for configuration update to complete..."
              aws lambda wait function-updated --function-name $lambda

              # Update Lambda code only
              aws lambda update-function-code \
                --function-name $lambda \
                --zip-file fileb://$lambda.zip \
                --publish

               # Wait for configuration update to complete
              echo "Waiting for configuration update to complete..."
              aws lambda wait function-updated --function-name $lambda

              VERSION=$(aws lambda publish-version --function-name $lambda --query Version --output text)

              aws lambda update-alias --function-name $lambda --name $ENV --function-version $VERSION

              echo $NEW_HASH > $HASH_FILE
            else
              echo "$lambda unchanged, skipping version publish"
            fi
          done

      - name: Update API Gateway routes for environment
        run: |
          ENV=${{ steps.env.outputs.ENV }}
          REST_API_ID=1u8zyys7vb

          # Define Lambda name mapping per route-method if needed

          declare -A ROUTES_METHODS
          
          # format: "METHOD:type[:lambda_name]"
          
          ROUTES_METHODS["/ebooks"]="GET:lambda:get_ebook_metadata OPTIONS:cors"
          ROUTES_METHODS["/google_signin_urls"]="GET:lambda:get_google_sign_in_url OPTIONS:lambda:get_google_sign_in_url"

          # Optional authorizers per route-method
          declare -A ROUTES_AUTHORIZE
          # format: "METHOD:authorizer_name"
          ROUTES_AUTHORIZE["/ebooks"]="GET:teen_${ENV}_authorizer"

          # Origins for CORS
          DOMAIN=${{ vars.OPTIONS_CORS_DOMAIN }}
          declare -A ROUTES_ORIGIN
          ROUTES_ORIGIN["/ebooks"]=$DOMAIN
          ROUTES_ORIGIN["/google_signin_urls"]=$DOMAIN

          for route in "${!ROUTES_METHODS[@]}"; do
              RESOURCE_ID=$(aws apigateway get-resources --rest-api-id $REST_API_ID --query "items[?path=='$route'].id" --output text)
              METHODS=(${ROUTES_METHODS[$route]})

              for method_entry in "${METHODS[@]}"; do
                  # Split method_entry into METHOD:type:lambda_name
                  IFS=':' read -r HTTP_METHOD TYPE LAMBDA_NAME <<< "$method_entry"

                  AUTHORIZE_ID=""
                  if [[ -n "${ROUTES_AUTHORIZE[$route]}" ]]; then
                      # Check if the authorizer matches this method
                      if [[ "${ROUTES_AUTHORIZE[$route]}" == "$HTTP_METHOD:"* ]]; then
                          AUTH_NAME="${ROUTES_AUTHORIZE[$route]#*:}"
                          AUTHORIZE_ID=$(aws apigateway get-authorizers \
                                          --rest-api-id $REST_API_ID \
                                          --query "items[?name=='$AUTH_NAME'].id" \
                                          --output text)
                      fi
                  fi

                  ORIGIN="${ROUTES_ORIGIN[$route]:-$DOMAIN}"

                  case "$TYPE" in
                      lambda)
                          # Build Lambda ARN with alias for environment
                          LAMBDA_ARN="arn:aws:apigateway:ap-southeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-southeast-1:300080618312:function:$LAMBDA_NAME:$ENV/invocations"

                          echo "Lambd arn with alias: $LAMBDA_ARN"

                          echo "Setting integration for $HTTP_METHOD $route -> Lambda $LAMBDA_NAME"
                          aws apigateway put-integration \
                              --rest-api-id $REST_API_ID \
                              --resource-id $RESOURCE_ID \
                              --http-method $HTTP_METHOD \
                              --type AWS_PROXY \
                              --integration-http-method POST \
                              --uri $LAMBDA_ARN

                          ;;
                      cors)
                          echo "Configuring OPTIONS CORS for $route"
                          # Method response
                          aws apigateway put-method-response \
                              --rest-api-id $REST_API_ID \
                              --resource-id $RESOURCE_ID \
                              --http-method OPTIONS \
                              --status-code 200 \
                              --response-parameters "method.response.header.Access-Control-Allow-Origin=false,method.response.header.Access-Control-Allow-Methods=false,method.response.header.Access-Control-Allow-Headers=false" \
                              --response-models '{"application/json": "Empty"}' || echo "OPTIONS method may already exist"

                          # Integration response
                          aws apigateway put-integration-response \
                              --rest-api-id $REST_API_ID \
                              --resource-id $RESOURCE_ID \
                              --http-method OPTIONS \
                              --status-code 200 \
                              --response-parameters "{\"method.response.header.Access-Control-Allow-Origin\":\"$ORIGIN\",\"method.response.header.Access-Control-Allow-Methods\":\"GET,POST,OPTIONS,PATCH,DELETE\",\"method.response.header.Access-Control-Allow-Headers\":\"Content-Type,Authorization,X-Requested-With\"}"
                          ;;
                      *)
                          echo "Skipping unsupported type $TYPE for $HTTP_METHOD $route"
                          ;;
                  esac

                  # Attach authorizer if exists
                  if [[ -n "$AUTHORIZE_ID" && "$HTTP_METHOD" != "OPTIONS" ]]; then
                      echo "Attaching authorizer $AUTHORIZE_ID to $HTTP_METHOD $route"
                      aws apigateway update-method \
                          --rest-api-id $REST_API_ID \
                          --resource-id $RESOURCE_ID \
                          --http-method $HTTP_METHOD \
                          --patch-operations op=replace,path=/authorizationType,value=COGNITO_USER_POOLS \
                                              op=replace,path=/authorizerId,value=$AUTHORIZE_ID
                  fi
              done
          done

          # Redeploy API Gateway stage
          echo "Redeploying API Gateway stage $ENV"
          aws apigateway create-deployment \
              --rest-api-id $REST_API_ID \
              --stage-name $ENV \
              --description "Updated all routes for $ENV"